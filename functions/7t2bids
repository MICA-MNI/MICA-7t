#!/bin/bash
#
# MICA dicoms_sorted to BIDS v.1.5.1

Col="38;5;83m" # Color code
#---------------- FUNCTION: HELP ----------------#
help() {
echo -e "\033[38;5;141m
Usage:    $(basename $0)\033[0m  \033[38;5;197m-in\033[0m <DICOMS_directory> \033[38;5;197m-id\033[0m <control_01> \033[38;5;197m-bids\033[0m <BIDS directory path>\n
\t\t\033[38;5;197m-in\033[0m 	Input directory with the subject's DICOMS directories (FULL PATH)
\t\t\033[38;5;197m-id\033[0m 	Subject identification for the new BIDS directory
\t\t\t  -id CAN be different than -in DICOMS directory
\t\t\033[38;5;197m-ses\033[0m 	flag to specify the session number (DEFAULT is 'ses-pre')
\t\t\033[38;5;197m-bids\033[0m 	Path to BIDS directory ( . or FULL PATH)
\t\t\033[38;5;197m-mica\033[0m 	ALWAYS use this flag in mica workstations

\t\t\033[38;5;197m-force\033[0m 	flag that will overwrite the directory

Check output with:
http://bids-standard.github.io/bids-validator/

NOTE: This script REQUIRES dcm2niix to work:
      https://github.com/rordenlab/dcm2niix
NOTE: you need to modify lines 132 and 133 to
      match your DICOM directories


RRC
McGill University, MNI, MICA-lab, June 2021
raul.rodriguezcrcues@mcgill.ca
"
}

# Source print functions from MICAPIPE
#dir_functions=$(dirname $(realpath "$0"))
#MICAPIPE=$(dirname $(realpath "$dir_functions"))
MICAPIPE=/data_/mica1/01_programs/micapipe
source "${MICAPIPE}/functions/utilities.sh"

#------------------------------------------------------------------------------#
#			ARGUMENTS
# Number of inputs
if [ "$#" -gt 10 ]; then Error "Too may arguments"; help; exit 0; fi
# Create VARIABLES
for arg in "$@"
do
  case "$arg" in
  -h|-help)
    help
    exit 1
  ;;
  -in)
   SUBJ_DIR=$2
   shift;shift
  ;;
  -id)
   Subj=$2
   shift;shift
  ;;
  -force)
   force=TRUE
   shift;shift
  ;;
  -bids)
   BIDS_DIR=$2
   shift;shift
  ;;
  -ses)
   SES=$2
   shift;shift
  ;;
  -mica)
   mica=TRUE
   shift;shift
  ;;
   esac
done

# argument check out & WARNINGS
arg=($SUBJ_DIR $Subj $BIDS_DIR)
if [ "${#arg[@]}" -lt 3 ]; then help
Error "One or more mandatory arguments are missing:
         -id    $Subj
         -in    $SUBJ_DIR
         -bids  $BIDS_DIR"
exit 0; fi

# Add the real path to the directories
SUBJ_DIR=$(realpath "$SUBJ_DIR")
BIDS_DIR=$(realpath "$BIDS_DIR")

# Sequence names and variables (ses is for default "ses-pre")
if [ -z ${SES} ]; then
  id="sub-${Subj}_"
  SES="SINGLE"
  BIDS="${BIDS_DIR}/sub-${Subj}"
else
  SES="ses-${SES/ses-/}";
  id="sub-${Subj}_${SES}_"
  BIDS="${BIDS_DIR}/sub-${Subj}/${SES}"
fi

echo -e "\n\033[38;5;141m
-------------------------------------------------------------
        DICOM to BIDS - Subject $Subj - Session $SES
-------------------------------------------------------------\033[0m"

# argument check out & WARNINGS
if [ "${#arg[@]}" -eq 0 ]; then help; exit 0; fi
if [[ -z $(which dcm2niix) ]]; then Error "dcm2niix NOT found"; exit 0; else Info "dcm2niix was found and is ready to work."; fi

# Check mandatory inputs: -id
arg=("$Subj")
if [ "${#arg[@]}" -lt 1 ]; then Error "Subject id is missing: $Subj"; help; exit 0; fi
if [[ "$Subj" =~ ['!@#$%^&*()_+'] ]]; then Error "Subject id shouldn't contain special characters:\n\t\t\t['!@#\$%^&*()_+']"; exit 0; fi

# check mandatory inputs: -bids
if [[ -z "$BIDS_DIR" ]]; then Error "BIDS directory is empty"; exit 0; fi

# check mandatory inputs: -in Is $SUBJ_DIR found?
if [ ! -d "${SUBJ_DIR}" ]; then Error "Subject DICOMS directory doesn't exist: \n\t ${Subj}";
    if [[ "${mica}" == TRUE ]]; then echo "$Subj, no dicoms_sorted" >> "${BIDS_DIR}/CHANGES"; fi;
    exit 0
fi

# overwrite BIDS-SUBJECT
if [[ "${force}" == TRUE ]]; then rm -rf "${BIDS}"; fi
# if [ -d ${BIDS} ]; then Error "Output directory already exist, use -force to overwrite it. \n\t    ${BIDS}\t    "; exit 0; fi

# Save actual path
here=$(pwd)

# -----------------------------------------------------------------------------------------------
# CHANGE THIS regex (regular expressions) ACCORDING TO YOUR DICOMS NAMING
# orig=("*mprage_sag_*_0.8mm" "*t2space_0.5iso_tra"  "*0.5mm_INV1"  "*0.5mm_INV2"  "*0.5mm_UNI_Images"  "*0.5mm_T1_Images"  "*0.4mm_INV1"  "*0.4mm_INV2"  "*0.4mm_UNI_Images"  "*0.4mm_T1_Images"  "*mbep2d_3e_bold"  "*mbep2d_se"  "*mbep2d_se_PA" "*me_gre_0.5mm_pat6_lessPF" "*me_gre_0.5mm_pat6" "*T2Star_Images" "*mbep2d_3e_bold_1.8mm" "*mbep2d_3e_bold_1.8mm_PA" "*mbep2d_se_1.8mm" "*mbep2d_se_1.8mm_PA")
# origDWI=("*diff_b2000-AP"  "*diff_b700-AP"  "*diff_b300-AP"  "*diff_b2000-PA"  "*diff_b700-PA"  "*diff_b300-PA"  "*b2000-AP_SBRef"  "*b2000-PA_SBRef"  "*b700-AP_SBRef"  "*b700-PA_SBRef"  "*b300-AP_SBRef"  "*b300-PA_SBRef"  "*diff_AP_b2000_90"  "*diff_multi-AP_advB0"  "*diff_multi-AP_stdB0"  "*diff_multi-AP_FS" "*diff_multi-AP_advB0_SBRef" "*diff_multi-AP_stdB0_SBRef" "*diff_multi-AP_FS_SBRef" "*diff_multi-AP_advB0_TRACEW" "*multi-PA_advB0_SBRef" "*diff_multi-PA_advB0")

# New BIDS-naming, follow the BIDS specification:
# https://bids-specification.readthedocs.io/en/stable/04-modality-specific-files/01-magnetic-resonance-imaging-data.html
#bids=(acq-0.8mm_T1w  acq-0.5mm_T2w  acq-0.5mm_inv1_T1map  acq-0.5mm_inv2_T1map  acq-0.5mm_uni_T1map  acq-0.5mm_T1_T1map  acq-0.4mm_inv1_T1map  acq-0.4mm_inv2_T1map  acq-0.4mm_uni_T1map  acq-0.4mm_T1_T1map  task-rest_acq-mb_dir-AP_bold  task-rest_acq-mbpe_dir-AP_bold  task-rest_acq-mbrpe_dir-PA_bold acq-0.5mm_pat6_lessPF acq-0.5mm_pat6 T2Star task-rest_acq-mb3e_1.8mm_dir-AP_bold  task-rest_acq-mb3e_1.8mm_dir-PA_bold  task-rest_acq-mbpe_1.8mm_dir-AP_bold task-rest_acq-mbpe_1.8mm_dir-PA_bold)
# bidsDWI=(acq-b2000-NUM_dir-AP_dwi  acq-b700-NUM_dir-AP_dwi  acq-b300-NUM_dir-AP_dwi  acq-b2000-NUM_dir-PA_dwi  acq-b700-NUM_dir-PA_dwi  acq-b300-NUM_dir-PA_dwi  acq-b2000_b0_dir-AP_dwi  acq-b2000_b0_dir-PA_dwi  acq-b700_b0_dir-AP_dwi  acq-b700_b0_dir-PA_dwi  acq-b300_b0_dir-AP_dwi  acq-b300_b0_dir-PA_dwi  acq-b2000-NUM_ep2d_dir-AP_dwi  acq-multi-NUM_advB0_dir-AP_dwi  acq-multi-NUM_stdB0_dir-AP_dwi  acq-multi-NUM_dir-AP_dwi acq-multi-NUM_dir-AP_desc-advB0_SBRef_dwi acq-multi-NUM_dir-AP_desc-stdB0_SBRef_dwi acq-multi-NUM_dir-AP_desc-FS_SBRef_dwi acq-multi-NUM_dir-AP_desc-advB0_TRACEW_dwi acq-multi-NUM_dir-PA_desc-advB0_SBRef_dwi acq-multi-NUM_dir-PA_desc-multi-PA_advB0_dwi)

# pilot4
# orig=("*b1map_tra_p2" "*b1map_tra_p2" "*mp2rage_0.5iso_sag_FA4_INV1" "*mp2rage_0.5iso_sag_FA4_INV2" "*mp2rage_0.5iso_sag_FA4_T1_Images" "*mp2rage_0.5iso_sag_FA4_UNI_Images" "*mprage_0.75iso_sag_FA4" "*gre_0.5iso_sag_FA4" "*mp2rage_0.5iso_sag_TI1000-3200_INV1" "*mp2rage_0.5iso_sag_TI1000-3200_INV2" "*mp2rage_0.5iso_sag_TI1000-3200_T1_Images" "*mp2rage_0.5iso_sag_TI1000-3200_UNI_Images" "*gre_FA13_0.5iso" "*mbep2d_3e_PL5500" "*mbep2d_se_PL5500" "*mbep2d_diff_multi-AP_advB0_PS_SBRef" "*mbep2d_diff_multi-AP_advB0_PS" "*mbep2d_diff_multi-AP_advB0_VS_SBRef" "*mbep2d_diff_multi-AP_advB0_VS" "*mbep2d_single_PL5500" "*mbep2d_single_PL5500" "*mprage_0.75iso_sag_FA7_TI1100")
# bids=(aqc-b1map_tra_p2 b1map_tra_p2 mp2rage_0.5iso_sag_FA4_INV1 mp2rage_0.5iso_sag_FA4_INV2 mp2rage_0.5iso_sag_FA4_T1_Images mp2rage_0.5iso_sag_FA4_UNI_Images mprage_0.75iso_sag_FA4 gre_0.5iso_sag_FA4 mp2rage_0.5iso_sag_TI1000-3200_INV1 mp2rage_0.5iso_sag_TI1000-3200_INV2 mp2rage_0.5iso_sag_TI1000-3200_T1_Images mp2rage_0.5iso_sag_TI1000-3200_UNI_Images gre_FA13_0.5iso mbep2d_3e_PL5500 mbep2d_se_PL5500 mbep2d_diff_multi-AP_advB0_PS_SBRef mbep2d_diff_multi-AP_advB0_PS mbep2d_diff_multi-AP_advB0_VS_SBRef mbep2d_diff_multi-AP_advB0_VS mbep2d_single_PL5500 mbep2d_single_PL5500 mprage_0.75iso_sag_FA7_TI1100)

# pilot5
# origDWI=("*cmrr_mbep2d_diff_90d-AP_advB0_PS_SBRef" "*cmrr_mbep2d_diff_90d-AP_advB0_PS" "*cmrr_mbep2d_diff_40d-AP_advB0_PS_SBRef" "*cmrr_mbep2d_diff_40d-AP_advB0_PS" "*cmrr_mbep2d_diff_10d-AP_advB0_PS_SBRef" "*cmrr_mbep2d_diff_10d-AP_advB0_PS")
# bidsDWI=(acq-90b-SBRef_dir-AP_dwi acq-90b_dir-AP_dwi acq-40b-SBRef_dir-AP_dwi acq-40b_dir-AP_dwi acq-10b-SBRef_dir-AP_dwi acq-10b_dir-AP_dwi)
# orig=("*ns_tfl_mprage_0.75iso_sag_FA7_TI1100" "*ns_gre_FA13_0.5iso_TE5.71_pat6" "*AAHead_Scout_32ch-head-coil" "*AAHead_Scout_32ch-head-coil_MPR_sag" "*AAHead_Scout_32ch-head-coil_MPR_cor" "*AAHead_Scout_32ch-head-coil_MPR_tra" "*ns_tfl_mprage_0.75iso_sag_FA4" "*cmrr_mbep2d_3e_PL55" "*cmrr_mbep2d_3e_PL55_2.5mm" "*ns_gre_FA13_0.5iso_TE5.71_pat6" "*ns_tse_vfl_c9_0.6iso_TR8")
# bids=(acq-0.75iso_FA7_mprage acq-0.5iso_greFA13 acq-AAHead acq-AAHead_sag acq-AAHead_cor acq-AAHead_tra acq-0.75iso_FA4_mprage acq-mbep2d_func acq-2.5mm_mbep2d_func acq-0.5iso_gre_FA13 acq-0.6iso_tse_vfl)

# pilot 6
# origDWI=( )
# bidsDWI=( )
# orig=("*06_b1map_tra_p2" "*07_b1map_tra_p2" "*08_ns_tfl_mprage_0.75iso_sag_FA4" "*09_cmrr_mbep2d_3e_bold_1.8mm_PL55" "*10_cmrr_mbep2d_3e_1.9mm_PL55_advB0" "*11_cmrr_mbep2d_spinecho_1.8" "*12_cmrr_mbep2d_spinecho_1.8_PA" "*13_cmrr_mbep2d_spinecho_1.9" "*14_cmrr_mbep2d_spinecho_1.9_PA" "*15_ns_tfl_mp2rage_0.5iso_sag_TI1000-3200_INV1" "*16_ns_tfl_mp2rage_0.5iso_sag_TI1000-3200_T1_Images" "*17_ns_tfl_mp2rage_0.5iso_sag_TI1000-3200_UNI_Images" "*18_ns_tfl_mp2rage_0.5iso_sag_TI1000-3200_INV2" "*19_cmrr_mbep2d_3e_1.9mm_PL55_advB0_task" "*20_me_gre_0.5mm_pat6" "*21_me_gre_0.5mm_pat6" "*22_T2Star_Images" "*23_fl_tof_tra_p3" "*24_fl_tof_tra_p3_MIP_SAG" "*25_fl_tof_tra_p3_MIP_COR" "*26_fl_tof_tra_p3_MIP_TRA")
# bids=(acq-b1map_run-1 acq-b1map_run-2 acq-0.75iso_FA4_mprage_T1w acq-mbep2d_1.8mm_PL55_dir-AP_bold acq-mbep2d_1.9mm_PL55_advB0_dir-AP_bold acq-spinecho_1.8mm_dir-AP_bold acq-spinecho_1.8mm_dir-PA_bold acq-spinecho_1.9mm_dir-AP_bold acq-spinecho_1.9mm_dir-PA_bold acq-0.5iso_m2rage_inv1_T1map acq-0.5iso_m2rage_T1w_T1map acq-0.5iso_m2rage_uni_T1map acq-0.5iso_m2rage_inv2_T1map acq-mbep2d_1.9mm_PL55_advB0_task_bold acq-gre_0.5mm_run-1_pat_T2star acq-gre_0.5mm_run-2_pat_T2star T2starw angio acq-SAG_angio acq-COR_angio acq-TRA_angio)

# pilot 7
origDWI=("*dwi_acq_b0-dir_PA_SBRef" "*dwi_acq_b0-dir_PA" "*dwi_acq_b2000_90d-dir_AP_SBRef" "*dwi_acq_b2000_90d-dir_AP" "*dwi_acq_b700_40d-dir_AP_SBRef" "*dwi_acq_b700_40d-dir_AP" "*dwi_acq_b300_10d-dir_AP_SBRef" "*dwi_acq_b300_10d-dir_AP")
bidsDWI=(acq_b0_SBRef_dir-PA_dwi acq_b0_dir-PA_dwi acq-b2000_SBRef_dir-AP_dwi acq-b2000_dir-AP_dwi acq-b700_SBRef_dir-AP_dwi acq-b700_dir-AP_dwi acq-b300_SBRef_dir-AP_dwi acq-b300_dir-AP_dwi)
orig=("*b1map_tra_p2" "*gre_field_mapping" "*anat-T1w_acq-mprage_075iso" "*anat-T1w_acq-mp2rage_05mm_INV1" "*anat-T1w_acq-mp2rage_05mm_INV2" "*anat-T1w_acq-mp2rage_05mm_T1_Images" "*anat-T1w_acq-mp2rage_05mm_UNI_Images" "*func-rsfmri_acq-mbep2_ME_19mm" "*fmap-fmri_acq-mbep2d_SE_19mm_dir-AP" "*fmap-fmri_acq-mbep2d_SE_19mm_dir-PA")
bids=(acq-b1map_tra_p2_fmap acq-gre_fmap acq-mprage_075iso_T1w acq-mp2rage_05mm_inv1_T1map acq-mp2rage_05mm_inv2_T1map acq-mp2rage_05mm_T1_T1map acq-mp2rage_05mm_uni_T1map task-rest_bold task-rest_dir-AP_bold task-rest_dir-PA_bold)

# -----------------------------------------------------------------------------------------------
# Create BIDS/subj_dir
Do_cmd mkdir -p "$BIDS"/{anat,func,dwi,fmap}
if [ ! -d "$BIDS" ]; then Error "Could not create subject BIDS directory, check permissions \n\t     ${BIDS}\t    "; exit 0; fi

# dicomx to Nifti with BIDS Naming
Do_cmd cd $SUBJ_DIR
# Warning lenght
n=$((${#orig[@]} - 1))
for ((k=0; k<=n; k++)); do
  N=$(ls -d ${orig[k]} | wc -l)
  # ONLY for MICA dicoms_sorted NAMES
  if [[ "$mica" == TRUE ]]; then N=`ls -d $(find . -name "${orig[k]}" ! -name "*ORIG*") | wc -l`; fi
  if [ "$N" -eq 0 ]; then
    Warn "No directories were found with the following name: ${orig[k]}"
  elif [ "$N" -gt 1 ]; then
    Names=($(ls -d ${orig[k]}))
    # ONLY for MICA dicoms_sorted NAMES
    if [[ "$mica" == TRUE ]]; then Names=($(ls -d $(find . -name "${orig[k]}" ! -name "*ORIG*"))); fi
    for ((i = 1; i <= N; i++)); do
       nii=$(echo ${Names[((i-2))]} | awk -F '_' '{print $1 "_" $2}')
       nom="${id}${bids[k]}"
       dcm=$(echo ${nom##*_})
       nom=$(echo "${nom/$dcm/}run-${i}_${dcm}")
       Do_cmd dcm2niix -b y -o "$BIDS" -f "$nom" ${nii}${orig[k]}
    done
  elif [ "$N" -eq 1 ]; then
     Do_cmd dcm2niix -b y -o "$BIDS" -f ${id}${bids[k]} ${orig[k]}
  fi
done
# move files to their corresponding directory
Do_cmd mv -v "$BIDS"/*mp2rage* "$BIDS"/anat
Do_cmd mv -v "$BIDS"/*bold* "$BIDS"/func
Do_cmd mv -v "$BIDS"/*T1* "$BIDS"/anat
Do_cmd mv -v "$BIDS"/*T2* "$BIDS"/anat
Do_cmd mv -v "$BIDS"/*fmap* "$BIDS"/fmap

# BIDS names of DWI including NUM_dwi: Number of Directions
n=$((${#origDWI[@]} - 1))
for ((k=0; k<=n; k++)); do
  N=$(ls -d ${origDWI[k]} | wc -l)
  if [ "$N" -eq 0 ]; then
    Warn "No directories were found with the following name: ${origDWI[k]}"
  elif [ "$N" -gt 1 ]; then
    Names=($(ls -d ${origDWI[k]}))
    for ((i = 1; i <= N; i++)); do
       nii=$(echo ${Names[((i-2))]} | awk -F '_' '{print $1 "_" $2}')
       nom=${id}${bidsDWI[k]}
       dcm=$(echo ${nom##*_})
       nom=$(echo ${nom/$dcm/}run-${i}_${dcm})
       Do_cmd dcm2niix -b y -o "$BIDS" -f $nom ${nii}${orig[k]}
    done
  elif [ $N -eq 1 ]; then
     Do_cmd dcm2niix -b y -o "$BIDS" -f ${id}${bidsDWI[k]} ${origDWI[k]}
  fi
done

Do_cmd cd "$BIDS"
for n in $(ls *bval); do Dir=0
  for i in $(cat $n); do if [[ "$i" == 0.00 ]] || [[ "$i" == 0 ]]; then Dir=$((Dir+1)); else Dir=$((Dir+1)); fi; done
  for j in ${n/bval/}*; do mv -v "$j" dwi/${j/NUM/$Dir}; done
done
Do_cmd mv -v "$BIDS"/*b0* "$BIDS"/dwi

# QC, count the number of Niftis (json) per subject
N=$(ls -R */*json | wc -l)
echo "sub-${Subj} $N $SUBJ_DIR" >> "$BIDS_DIR"/participants.tsv

# Go back to initial directory
Do_cmd cd "$here"

Info "Remember to validate your BIDS directory:
                http://bids-standard.github.io/bids-validator/"
bids_variables_unset
